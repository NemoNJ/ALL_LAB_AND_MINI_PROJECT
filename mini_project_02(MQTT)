#include <WiFi.h>
#include <MQTT.h>
#define motor1 19
#define motor2 18
#define motor3 17
#define motor4 16
#define led_on 23
#define button1 35
#define button2 34

const char ssid[] = "realme 12+ 5G";
const char pass[] = "i8pedcfn";
String status;//initial state
const char mqtt_broker[]="test.mosquitto.org";
const char mqtt_topic[]="group1/miniproject2";
const char mqtt_client_id[]="arduino_group_1"; // must change this string to a unique value
int MQTT_PORT=1883;

WiFiClient net;
MQTTClient client;

unsigned long lastMillis = 0;
int i = 1;
bool safety = true;
//wifi connect process
void connect() {
  Serial.print("checking wifi...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
  }

  Serial.print("\nconnecting...");
  while (!client.connect(mqtt_client_id)) {  
    Serial.print(".");
    delay(1000);
  }

  Serial.println("\nconnected!");

  client.subscribe(mqtt_topic);
  // client.unsubscribe("/hello");
}

void messageReceived(String &topic, String &payload) {
  Serial.println("incoming: " + topic + " - " + payload);
  status = payload;
  // Note: Do not use the client in the callback to publish, subscribe or
  // unsubscribe as it may cause deadlocks when other things arrive while
  // sending and receiving acknowledgments. Instead, change a global variable,
  // or push to a queue and handle it in the loop after calling `client.loop()`.
}
//high = stop
void checkbutton(){
  client.loop();
  delay(10);  // <- fixes some issues with WiFi stability

  if (!client.connected()) {
    connect();
  }
  //process
  digitalWrite(led_on, HIGH);
  // if(i == 1){
  //        digitalWrite(led_close, HIGH);
  //        digitalWrite(led_open, LOW);
  //        i++;
  // }
  //button control
  if(digitalRead(button1) == LOW && digitalRead(button2) == HIGH && safety == true){
      for(int i = 1;i < 140;i++) opendoor();
      safety = false;
  }
  if(digitalRead(button1) == HIGH && digitalRead(button2) == LOW && safety == false) { 
      for(int i = 1;i < 150;i++) closedoor();
        //  digitalWrite(led_close, HIGH);
        //  digitalWrite(led_open, LOW);
         safety = true;
       }
  //computer control
  if(status == "on" && safety == true){
      for(int i = 1;i < 140;i++) opendoor();
      safety = false;
  }
  if(status == "off" && safety == false) { 
      for(int i = 1;i < 142;i++) closedoor();
        //  digitalWrite(led_close, HIGH);
        //  digitalWrite(led_open, LOW);
         safety = true;
  } 
  if(digitalRead(button1) ==  HIGH && digitalRead(button2) == HIGH){
       stopdoor();   
       }else{
        stopdoor();
       }
}
void opendoor(){     
// digitalWrite(led_close, LOW);
// digitalWrite(led_open, HIGH);
//step open
digitalWrite(motor1, HIGH);
digitalWrite(motor2, LOW);
digitalWrite(motor3, LOW);
digitalWrite(motor4, LOW);
delay(8);
digitalWrite(motor1, LOW);
digitalWrite(motor2, HIGH);
digitalWrite(motor3, LOW);
digitalWrite(motor4, LOW);
delay(8);
digitalWrite(motor1, LOW);
digitalWrite(motor2, LOW);
digitalWrite(motor3, HIGH);
digitalWrite(motor4, LOW);
delay(8);
digitalWrite(motor1, LOW);
digitalWrite(motor2, LOW);
digitalWrite(motor3, LOW);
digitalWrite(motor4, HIGH);
delay(8);
}
void closedoor(){
digitalWrite(motor1, LOW);
digitalWrite(motor2, LOW);
digitalWrite(motor3, LOW);
digitalWrite(motor4, HIGH);
delay(8);
digitalWrite(motor1, LOW);
digitalWrite(motor2, LOW);
digitalWrite(motor3, HIGH);
digitalWrite(motor4, LOW);
delay(8);
digitalWrite(motor1, LOW);
digitalWrite(motor2, HIGH);
digitalWrite(motor3, LOW);
digitalWrite(motor4, LOW);
delay(8);
digitalWrite(motor1, HIGH);
digitalWrite(motor2, LOW);
digitalWrite(motor3, LOW);
digitalWrite(motor4, LOW);
delay(8);
}

void stopdoor(){
digitalWrite(motor1, LOW);
digitalWrite(motor2, LOW);
digitalWrite(motor3, LOW);
digitalWrite(motor4, LOW);
}
void CheckWIFI(){
  if(WiFi.status() == WL_CONNECTED){
        digitalWrite(led_on,HIGH);
  }else{
        digitalWrite(led_on,LOW);
  }
}
void setup() {
  Serial.begin(9600);
  WiFi.begin(ssid, pass);
  // Note: Local domain names (e.g. "Computer.local" on OSX) are not supported
  // by Arduino. You need to set the IP address directly.
  client.begin(mqtt_broker, MQTT_PORT, net);
  client.onMessage(messageReceived);
  connect();
  pinMode(motor1, OUTPUT);
  pinMode(motor2, OUTPUT);
  pinMode(motor3, OUTPUT);
  pinMode(motor4, OUTPUT);
  pinMode(led_on, OUTPUT);
  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
}
void loop(){
   CheckWIFI();
   checkbutton();
  }

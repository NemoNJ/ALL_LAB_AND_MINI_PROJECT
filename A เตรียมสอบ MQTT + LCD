#include <WiFi.h>
#include <MQTT.h>
#include <LCD_I2C.h>
// #include "RTClib.h"

#define motor1 19
#define motor2 18
#define motor3 17
#define motor4 16
#define led_on 23
#define button1 35
#define button2 34
int i = 1;
unsigned long lastMillis = 0;
bool safety = true;
//rtc
RTC_DS1307 rtc;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
//lcd
LCD_I2C lcd(0x27, 16, 2);
//mqtt
const char ssid[] = "HONOR 90";
const char pass[] = "-";
String status;  // Initial state
String lastStatus = "";  // Store the last received status to prevent duplicates
const char mqtt_broker[] = "test.mosquitto.org";
const char mqtt_topic[] = "group1/miniproject2";
const char mqtt_client_id[] = "arduino_group_1"; // Must change this string to a unique value
int MQTT_PORT = 1883;
WiFiClient net;
MQTTClient client;


// Wi-Fi connect process
void connect() {
  Serial.print("checking wifi...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
  }

  Serial.print("\nconnecting...");
  while (!client.connect(mqtt_client_id)) {
    Serial.print(".");
    delay(1000);
  }

  Serial.println("\nconnected!");
  client.subscribe(mqtt_topic);
}

void messageReceived(String &topic, String &payload) {
  Serial.println("incoming: " + topic + " - " + payload);
  
  // Check if the received message is different from the last received message
  if (payload != lastStatus) {
    status = payload;  // Update status only if it is different
    lastStatus = payload;  // Store the current status to prevent duplicates
  }
}

// Button control and MQTT control logic
void checkbutton() {
  //MQTT
  client.loop();
  delay(10);  // <- fixes some issues with WiFi stability
  }

void opendoor() {
  digitalWrite(motor1, HIGH);
  digitalWrite(motor2, LOW);
  digitalWrite(motor3, LOW);
  digitalWrite(motor4, LOW);
  delay(8);
  
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, HIGH);
  digitalWrite(motor3, LOW);
  digitalWrite(motor4, LOW);
  delay(8);
  
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, LOW);
  digitalWrite(motor3, HIGH);
  digitalWrite(motor4, LOW);
  delay(8);
  
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, LOW);
  digitalWrite(motor3, LOW);
  digitalWrite(motor4, HIGH);
  delay(8);
}

void closedoor() {
  // Rotate motors in sequence to close door
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, LOW);
  digitalWrite(motor3, LOW);
  digitalWrite(motor4, HIGH);
  delay(8);
  
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, LOW);
  digitalWrite(motor3, HIGH);
  digitalWrite(motor4, LOW);
  delay(8);
  
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, HIGH);
  digitalWrite(motor3, LOW);
  digitalWrite(motor4, LOW);
  delay(8);
  
  digitalWrite(motor1, HIGH);
  digitalWrite(motor2, LOW);
  digitalWrite(motor3, LOW);
  digitalWrite(motor4, LOW);
  delay(8);
}

void stopdoor() {
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, LOW);
  digitalWrite(motor3, LOW);
  digitalWrite(motor4, LOW);
}


void setup() {
  Serial.begin(9600);
  //wifi
  WiFi.begin(ssid, pass);
  client.begin(mqtt_broker, MQTT_PORT, net);
  client.onMessage(messageReceived);
  connect();
  
  //lcd
  lcd.begin();
  lcd.backlight();
  //clock
   if (!rtc.begin()) {
        lcd.print("Couldn't find RTC");
      while (1);
  }

  if (!rtc.isrunning()) {
       rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    }
  pinMode(motor1, OUTPUT);  
}
void loop() {
  checkbutton();
}
